/*
 * generated by Xtext
 */
package uk.ac.kcl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import uk.ac.kcl.mDEOptimise.BasepathSpec;
import uk.ac.kcl.mDEOptimise.EvolverSpec;
import uk.ac.kcl.mDEOptimise.FitnessFunctionSpec;
import uk.ac.kcl.mDEOptimise.MDEOptimisePackage;
import uk.ac.kcl.mDEOptimise.MetaModelSpec;
import uk.ac.kcl.mDEOptimise.Optimisation;
import uk.ac.kcl.services.MDEOptimiseGrammarAccess;

@SuppressWarnings("all")
public class MDEOptimiseSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MDEOptimiseGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MDEOptimisePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MDEOptimisePackage.BASEPATH_SPEC:
				sequence_BasepathSpec(context, (BasepathSpec) semanticObject); 
				return; 
			case MDEOptimisePackage.EVOLVER_SPEC:
				sequence_EvolverSpec(context, (EvolverSpec) semanticObject); 
				return; 
			case MDEOptimisePackage.FITNESS_FUNCTION_SPEC:
				sequence_FitnessFunctionSpec(context, (FitnessFunctionSpec) semanticObject); 
				return; 
			case MDEOptimisePackage.META_MODEL_SPEC:
				sequence_MetaModelSpec(context, (MetaModelSpec) semanticObject); 
				return; 
			case MDEOptimisePackage.OPTIMISATION:
				sequence_Optimisation(context, (Optimisation) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     BasepathSpec returns BasepathSpec
	 *
	 * Constraint:
	 *     location=URL
	 */
	protected void sequence_BasepathSpec(ISerializationContext context, BasepathSpec semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MDEOptimisePackage.Literals.BASEPATH_SPEC__LOCATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MDEOptimisePackage.Literals.BASEPATH_SPEC__LOCATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBasepathSpecAccess().getLocationURLTerminalRuleCall_1_0(), semanticObject.getLocation());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvolverSpec returns EvolverSpec
	 *
	 * Constraint:
	 *     (rule_location=URL unit=STRING)
	 */
	protected void sequence_EvolverSpec(ISerializationContext context, EvolverSpec semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MDEOptimisePackage.Literals.EVOLVER_SPEC__RULE_LOCATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MDEOptimisePackage.Literals.EVOLVER_SPEC__RULE_LOCATION));
			if (transientValues.isValueTransient(semanticObject, MDEOptimisePackage.Literals.EVOLVER_SPEC__UNIT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MDEOptimisePackage.Literals.EVOLVER_SPEC__UNIT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvolverSpecAccess().getRule_locationURLTerminalRuleCall_2_0(), semanticObject.getRule_location());
		feeder.accept(grammarAccess.getEvolverSpecAccess().getUnitSTRINGTerminalRuleCall_4_0(), semanticObject.getUnit());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FitnessFunctionSpec returns FitnessFunctionSpec
	 *
	 * Constraint:
	 *     class=STRING
	 */
	protected void sequence_FitnessFunctionSpec(ISerializationContext context, FitnessFunctionSpec semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MDEOptimisePackage.Literals.FITNESS_FUNCTION_SPEC__CLASS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MDEOptimisePackage.Literals.FITNESS_FUNCTION_SPEC__CLASS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFitnessFunctionSpecAccess().getClassSTRINGTerminalRuleCall_1_0(), semanticObject.getClass_());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MetaModelSpec returns MetaModelSpec
	 *
	 * Constraint:
	 *     location=URL
	 */
	protected void sequence_MetaModelSpec(ISerializationContext context, MetaModelSpec semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MDEOptimisePackage.Literals.META_MODEL_SPEC__LOCATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MDEOptimisePackage.Literals.META_MODEL_SPEC__LOCATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMetaModelSpecAccess().getLocationURLTerminalRuleCall_1_0(), semanticObject.getLocation());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Optimisation returns Optimisation
	 *
	 * Constraint:
	 *     (basepath=BasepathSpec metamodel=MetaModelSpec fitness+=FitnessFunctionSpec+ evolvers+=EvolverSpec+)
	 */
	protected void sequence_Optimisation(ISerializationContext context, Optimisation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
