/*
 * generated by Xtext
 */
package uk.ac.kcl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MDEOptimiseGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class OptimisationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Optimisation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMetamodelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMetamodelMetaModelSpecParserRuleCall_0_0 = (RuleCall)cMetamodelAssignment_0.eContents().get(0);
		private final Assignment cFitnessAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFitnessFitnessFunctionSpecParserRuleCall_1_0 = (RuleCall)cFitnessAssignment_1.eContents().get(0);
		private final Assignment cEvolversAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEvolversEvolverSpecParserRuleCall_2_0 = (RuleCall)cEvolversAssignment_2.eContents().get(0);
		
		//Optimisation:
		//	metamodel=MetaModelSpec fitness=FitnessFunctionSpec evolvers+=EvolverSpec+;
		@Override public ParserRule getRule() { return rule; }

		//metamodel=MetaModelSpec fitness=FitnessFunctionSpec evolvers+=EvolverSpec+
		public Group getGroup() { return cGroup; }

		//metamodel=MetaModelSpec
		public Assignment getMetamodelAssignment_0() { return cMetamodelAssignment_0; }

		//MetaModelSpec
		public RuleCall getMetamodelMetaModelSpecParserRuleCall_0_0() { return cMetamodelMetaModelSpecParserRuleCall_0_0; }

		//fitness=FitnessFunctionSpec
		public Assignment getFitnessAssignment_1() { return cFitnessAssignment_1; }

		//FitnessFunctionSpec
		public RuleCall getFitnessFitnessFunctionSpecParserRuleCall_1_0() { return cFitnessFitnessFunctionSpecParserRuleCall_1_0; }

		//evolvers+=EvolverSpec+
		public Assignment getEvolversAssignment_2() { return cEvolversAssignment_2; }

		//EvolverSpec
		public RuleCall getEvolversEvolverSpecParserRuleCall_2_0() { return cEvolversEvolverSpecParserRuleCall_2_0; }
	}

	public class MetaModelSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetaModelSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMetamodelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLocationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLocationURLTerminalRuleCall_1_0 = (RuleCall)cLocationAssignment_1.eContents().get(0);
		
		//MetaModelSpec:
		//	"metamodel" location=URL;
		@Override public ParserRule getRule() { return rule; }

		//"metamodel" location=URL
		public Group getGroup() { return cGroup; }

		//"metamodel"
		public Keyword getMetamodelKeyword_0() { return cMetamodelKeyword_0; }

		//location=URL
		public Assignment getLocationAssignment_1() { return cLocationAssignment_1; }

		//URL
		public RuleCall getLocationURLTerminalRuleCall_1_0() { return cLocationURLTerminalRuleCall_1_0; }
	}

	public class FitnessFunctionSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FitnessFunctionSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFitnessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClassSTRINGTerminalRuleCall_1_0 = (RuleCall)cClassAssignment_1.eContents().get(0);
		
		//FitnessFunctionSpec:
		//	"fitness" class=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"fitness" class=STRING
		public Group getGroup() { return cGroup; }

		//"fitness"
		public Keyword getFitnessKeyword_0() { return cFitnessKeyword_0; }

		//class=STRING
		public Assignment getClassAssignment_1() { return cClassAssignment_1; }

		//STRING
		public RuleCall getClassSTRINGTerminalRuleCall_1_0() { return cClassSTRINGTerminalRuleCall_1_0; }
	}

	public class EvolverSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EvolverSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEvolveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cUsingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRule_locationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRule_locationURLTerminalRuleCall_2_0 = (RuleCall)cRule_locationAssignment_2.eContents().get(0);
		
		//EvolverSpec: // This expects to be passed in a Henshin model
		//// TODO May need to add more bits to allow specifying the module to run etc.
		//	"evolve" "using" rule_location=URL;
		@Override public ParserRule getRule() { return rule; }

		//// This expects to be passed in a Henshin model
		//// TODO May need to add more bits to allow specifying the module to run etc.
		//"evolve" "using" rule_location=URL
		public Group getGroup() { return cGroup; }

		//// This expects to be passed in a Henshin model
		//// TODO May need to add more bits to allow specifying the module to run etc.
		//"evolve"
		public Keyword getEvolveKeyword_0() { return cEvolveKeyword_0; }

		//"using"
		public Keyword getUsingKeyword_1() { return cUsingKeyword_1; }

		//rule_location=URL
		public Assignment getRule_locationAssignment_2() { return cRule_locationAssignment_2; }

		//URL
		public RuleCall getRule_locationURLTerminalRuleCall_2_0() { return cRule_locationURLTerminalRuleCall_2_0; }
	}
	
	
	private final OptimisationElements pOptimisation;
	private final MetaModelSpecElements pMetaModelSpec;
	private final FitnessFunctionSpecElements pFitnessFunctionSpec;
	private final EvolverSpecElements pEvolverSpec;
	private final TerminalRule tURL;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MDEOptimiseGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pOptimisation = new OptimisationElements();
		this.pMetaModelSpec = new MetaModelSpecElements();
		this.pFitnessFunctionSpec = new FitnessFunctionSpecElements();
		this.pEvolverSpec = new EvolverSpecElements();
		this.tURL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "URL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.MDEOptimise".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Optimisation:
	//	metamodel=MetaModelSpec fitness=FitnessFunctionSpec evolvers+=EvolverSpec+;
	public OptimisationElements getOptimisationAccess() {
		return pOptimisation;
	}
	
	public ParserRule getOptimisationRule() {
		return getOptimisationAccess().getRule();
	}

	//MetaModelSpec:
	//	"metamodel" location=URL;
	public MetaModelSpecElements getMetaModelSpecAccess() {
		return pMetaModelSpec;
	}
	
	public ParserRule getMetaModelSpecRule() {
		return getMetaModelSpecAccess().getRule();
	}

	//FitnessFunctionSpec:
	//	"fitness" class=STRING;
	public FitnessFunctionSpecElements getFitnessFunctionSpecAccess() {
		return pFitnessFunctionSpec;
	}
	
	public ParserRule getFitnessFunctionSpecRule() {
		return getFitnessFunctionSpecAccess().getRule();
	}

	//EvolverSpec: // This expects to be passed in a Henshin model
	//// TODO May need to add more bits to allow specifying the module to run etc.
	//	"evolve" "using" rule_location=URL;
	public EvolverSpecElements getEvolverSpecAccess() {
		return pEvolverSpec;
	}
	
	public ParserRule getEvolverSpecRule() {
		return getEvolverSpecAccess().getRule();
	}

	//terminal URL: // TODO: We can probably provide a more fine-grained specification here
	//	"<" !">"* ">";
	public TerminalRule getURLRule() {
		return tURL;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
