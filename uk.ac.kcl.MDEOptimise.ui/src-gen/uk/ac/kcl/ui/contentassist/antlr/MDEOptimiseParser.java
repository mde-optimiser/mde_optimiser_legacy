/*
 * generated by Xtext
 */
package uk.ac.kcl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import uk.ac.kcl.services.MDEOptimiseGrammarAccess;

public class MDEOptimiseParser extends AbstractContentAssistParser {
	
	@Inject
	private MDEOptimiseGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected uk.ac.kcl.ui.contentassist.antlr.internal.InternalMDEOptimiseParser createParser() {
		uk.ac.kcl.ui.contentassist.antlr.internal.InternalMDEOptimiseParser result = new uk.ac.kcl.ui.contentassist.antlr.internal.InternalMDEOptimiseParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getOptimisationAccess().getGroup(), "rule__Optimisation__Group__0");
					put(grammarAccess.getMetaModelSpecAccess().getGroup(), "rule__MetaModelSpec__Group__0");
					put(grammarAccess.getFitnessFunctionSpecAccess().getGroup(), "rule__FitnessFunctionSpec__Group__0");
					put(grammarAccess.getEvolverSpecAccess().getGroup(), "rule__EvolverSpec__Group__0");
					put(grammarAccess.getOptimisationAccess().getMetamodelAssignment_0(), "rule__Optimisation__MetamodelAssignment_0");
					put(grammarAccess.getOptimisationAccess().getFitnessAssignment_1(), "rule__Optimisation__FitnessAssignment_1");
					put(grammarAccess.getOptimisationAccess().getEvolversAssignment_2(), "rule__Optimisation__EvolversAssignment_2");
					put(grammarAccess.getMetaModelSpecAccess().getLocationAssignment_1(), "rule__MetaModelSpec__LocationAssignment_1");
					put(grammarAccess.getFitnessFunctionSpecAccess().getClassAssignment_3(), "rule__FitnessFunctionSpec__ClassAssignment_3");
					put(grammarAccess.getFitnessFunctionSpecAccess().getMethodAssignment_5(), "rule__FitnessFunctionSpec__MethodAssignment_5");
					put(grammarAccess.getEvolverSpecAccess().getRule_locationAssignment_2(), "rule__EvolverSpec__Rule_locationAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			uk.ac.kcl.ui.contentassist.antlr.internal.InternalMDEOptimiseParser typedParser = (uk.ac.kcl.ui.contentassist.antlr.internal.InternalMDEOptimiseParser) parser;
			typedParser.entryRuleOptimisation();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MDEOptimiseGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MDEOptimiseGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
